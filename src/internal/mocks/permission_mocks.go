// Code generated by MockGen. DO NOT EDIT.
// Source: permission_ports.go
//
// Generated by this command:
//
//	mockgen -source=permission_ports.go -destination=../mocks/permission_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Manolo-Esc/gommence/src/internal/domain"
	ports "github.com/Manolo-Esc/gommence/src/internal/ports"
	gomock "go.uber.org/mock/gomock"
)

// MockPermissionRepository is a mock of PermissionRepository interface.
type MockPermissionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionRepositoryMockRecorder
	isgomock struct{}
}

// MockPermissionRepositoryMockRecorder is the mock recorder for MockPermissionRepository.
type MockPermissionRepositoryMockRecorder struct {
	mock *MockPermissionRepository
}

// NewMockPermissionRepository creates a new mock instance.
func NewMockPermissionRepository(ctrl *gomock.Controller) *MockPermissionRepository {
	mock := &MockPermissionRepository{ctrl: ctrl}
	mock.recorder = &MockPermissionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermissionRepository) EXPECT() *MockPermissionRepositoryMockRecorder {
	return m.recorder
}

// MockPermissionService is a mock of PermissionService interface.
type MockPermissionService struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionServiceMockRecorder
	isgomock struct{}
}

// MockPermissionServiceMockRecorder is the mock recorder for MockPermissionService.
type MockPermissionServiceMockRecorder struct {
	mock *MockPermissionService
}

// NewMockPermissionService creates a new mock instance.
func NewMockPermissionService(ctrl *gomock.Controller) *MockPermissionService {
	mock := &MockPermissionService{ctrl: ctrl}
	mock.recorder = &MockPermissionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermissionService) EXPECT() *MockPermissionServiceMockRecorder {
	return m.recorder
}

// GetUserGlobalPermissions mocks base method.
func (m *MockPermissionService) GetUserGlobalPermissions(ctx context.Context, forUser, byUser string) ([]domain.Permission, ports.APIError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserGlobalPermissions", ctx, forUser, byUser)
	ret0, _ := ret[0].([]domain.Permission)
	ret1, _ := ret[1].(ports.APIError)
	return ret0, ret1
}

// GetUserGlobalPermissions indicates an expected call of GetUserGlobalPermissions.
func (mr *MockPermissionServiceMockRecorder) GetUserGlobalPermissions(ctx, forUser, byUser any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserGlobalPermissions", reflect.TypeOf((*MockPermissionService)(nil).GetUserGlobalPermissions), ctx, forUser, byUser)
}

// IsSameUserOrHasSomePermission mocks base method.
func (m *MockPermissionService) IsSameUserOrHasSomePermission(byUser, forUser string, permissions []domain.Permission) (bool, ports.APIError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSameUserOrHasSomePermission", byUser, forUser, permissions)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(ports.APIError)
	return ret0, ret1
}

// IsSameUserOrHasSomePermission indicates an expected call of IsSameUserOrHasAnyPermission.
func (mr *MockPermissionServiceMockRecorder) IsSameUserOrHasSomePermission(byUser, forUser, permissions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSameUserOrHasSomePermission", reflect.TypeOf((*MockPermissionService)(nil).IsSameUserOrHasSomePermission), byUser, forUser, permissions)
}
