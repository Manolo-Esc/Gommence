basePath: /api/v1
definitions:
  dtos.LoggedUser:
    description: Logged user information
    properties:
      access_token:
        description: Authenticaton token
        type: string
    type: object
  dtos.LoginCredentials:
    description: Request to sign in the program
    properties:
      email:
        description: Email of the user signing in
        example: john.doe@example.com
        type: string
      secret:
        description: Password or third party token of the user signing in
        example: password
        type: string
    required:
    - email
    - secret
    type: object
  dtos.User:
    description: User data
    properties:
      email:
        description: Email of the new user
        example: john.doe@example.com
        type: string
      first_name:
        description: First name of the new user
        example: John
        type: string
      id:
        description: First name of the new user
        example: 23GfxRTs
        type: string
      last_name:
        description: First last name of the new user
        example: Doe
        type: string
      second_last_name:
        description: Second last name of the new user
        example: Smith
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: Go Web Server push starter
  title: Gommence
  version: "1.0"
paths:
  /auth/signin:
    post:
      consumes:
      - application/json
      description: Receives login credentials and returns a token
      parameters:
      - description: Credentials
        in: body
        name: loginData
        required: true
        schema:
          $ref: '#/definitions/dtos.LoginCredentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.LoggedUser'
        "400":
          description: Invalid data
        "500":
          description: Error generating response or token
      summary: Sign in the system
      tags:
      - Auth
  /health:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Health checking URL
      tags:
      - Misc
  /user/:
    get:
      description: Get all Users in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dtos.User'
            type: array
        "400":
          description: Invalid data
        "500":
          description: Error generating response
      summary: Get all Users
      tags:
      - Users
  /user/{userId}:
    get:
      description: Get all Users in the system
      parameters:
      - description: ID del usuario
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.User'
        "400":
          description: Invalid data
        "500":
          description: Error generating response or token
      summary: Get all Users
      tags:
      - Users
swagger: "2.0"
